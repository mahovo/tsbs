// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// compute_default_block_length
int compute_default_block_length(const Rcpp::NumericMatrix& x);
RcppExport SEXP _tsbs_compute_default_block_length(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_default_block_length(x));
    return rcpp_result_gen;
END_RCPP
}
// blockBootstrap_cpp
Rcpp::List blockBootstrap_cpp(SEXP xSEXP, SEXP n_boot_spec, SEXP block_length_spec, const std::string& bs_type, const std::string& block_type, const std::string& taper_type, const double& tukey_alpha, SEXP num_blocks_spec, const int num_boots, SEXP p, const double stationary_max_percentile, const double stationary_max_fraction_of_n);
RcppExport SEXP _tsbs_blockBootstrap_cpp(SEXP xSEXPSEXP, SEXP n_boot_specSEXP, SEXP block_length_specSEXP, SEXP bs_typeSEXP, SEXP block_typeSEXP, SEXP taper_typeSEXP, SEXP tukey_alphaSEXP, SEXP num_blocks_specSEXP, SEXP num_bootsSEXP, SEXP pSEXP, SEXP stationary_max_percentileSEXP, SEXP stationary_max_fraction_of_nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xSEXP(xSEXPSEXP);
    Rcpp::traits::input_parameter< SEXP >::type n_boot_spec(n_boot_specSEXP);
    Rcpp::traits::input_parameter< SEXP >::type block_length_spec(block_length_specSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type bs_type(bs_typeSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type block_type(block_typeSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type taper_type(taper_typeSEXP);
    Rcpp::traits::input_parameter< const double& >::type tukey_alpha(tukey_alphaSEXP);
    Rcpp::traits::input_parameter< SEXP >::type num_blocks_spec(num_blocks_specSEXP);
    Rcpp::traits::input_parameter< const int >::type num_boots(num_bootsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type stationary_max_percentile(stationary_max_percentileSEXP);
    Rcpp::traits::input_parameter< const double >::type stationary_max_fraction_of_n(stationary_max_fraction_of_nSEXP);
    rcpp_result_gen = Rcpp::wrap(blockBootstrap_cpp(xSEXP, n_boot_spec, block_length_spec, bs_type, block_type, taper_type, tukey_alpha, num_blocks_spec, num_boots, p, stationary_max_percentile, stationary_max_fraction_of_n));
    return rcpp_result_gen;
END_RCPP
}
// fit_msvar_cpp
Rcpp::List fit_msvar_cpp(const arma::mat& y, int max_iter, double tol);
RcppExport SEXP _tsbs_fit_msvar_cpp(SEXP ySEXP, SEXP max_iterSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(fit_msvar_cpp(y, max_iter, tol));
    return rcpp_result_gen;
END_RCPP
}
// fit_ms_varma_garch_cpp
Rcpp::List fit_ms_varma_garch_cpp(const arma::mat& y, int M, Rcpp::List spec, std::string model_type, Rcpp::List control);
RcppExport SEXP _tsbs_fit_ms_varma_garch_cpp(SEXP ySEXP, SEXP MSEXP, SEXP specSEXP, SEXP model_typeSEXP, SEXP controlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type spec(specSEXP);
    Rcpp::traits::input_parameter< std::string >::type model_type(model_typeSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type control(controlSEXP);
    rcpp_result_gen = Rcpp::wrap(fit_ms_varma_garch_cpp(y, M, spec, model_type, control));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_tsbs_compute_default_block_length", (DL_FUNC) &_tsbs_compute_default_block_length, 1},
    {"_tsbs_blockBootstrap_cpp", (DL_FUNC) &_tsbs_blockBootstrap_cpp, 12},
    {"_tsbs_fit_msvar_cpp", (DL_FUNC) &_tsbs_fit_msvar_cpp, 3},
    {"_tsbs_fit_ms_varma_garch_cpp", (DL_FUNC) &_tsbs_fit_ms_varma_garch_cpp, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_tsbs(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
